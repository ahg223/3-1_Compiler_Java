/* Generated By:JavaCC: Do not edit this line. ProjectGrammarTokenManager.java */
package Project;
import java.util.HashMap;

/** Token Manager. */
public class ProjectGrammarTokenManager implements ProjectGrammarConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 60:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 62:
         return jjStopAtPos(0, 26);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x6000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800200L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1000a0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x228000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1001000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x6440L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x161a00L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x208100L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xe040L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x210000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800020L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x580100L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(2, 10);
         break;
      default :
         return 3;
   }
   return 3;
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(3, 12);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 24);
         break;
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(3, 16);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(3, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 112:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(3, 21);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(3, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x6800L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      default :
         return 4;
   }
   return 4;
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 104:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(4, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(4, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(4, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      default :
         return 5;
   }
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800200L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(5, 15);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      default :
         return 6;
   }
   return 6;
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(6, 6);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800200L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      default :
         return 7;
   }
   return 7;
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(7, 23);
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      default :
         return 8;
   }
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(8, 14);
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(8, 9);
         break;
      default :
         return 9;
   }
   return 9;
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(9, 8);
         break;
      default :
         return 10;
   }
   return 10;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\160\141\162\164", 
"\155\145\141\163\165\162\145", "\160\162\151\156\164", "\141\164\164\162\151\142\165\164\145\163", 
"\144\151\166\151\163\151\157\156\163", "\153\145\171", "\146\151\146\164\150\163", "\164\151\155\145", 
"\142\145\141\164\163", "\142\145\141\164\55\164\171\160\145", "\163\164\141\166\145\163", 
"\143\154\145\146", "\163\151\147\156", "\154\151\156\145", "\156\157\164\145", 
"\160\151\164\143\150", "\163\164\145\160", "\157\143\164\141\166\145", 
"\144\165\162\141\164\151\157\156", "\164\171\160\145", "\74", "\76", "\74\57", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[0];
static private final int[] jjstateSet = new int[0];
static protected char curChar;
/** Constructor. */
public ProjectGrammarTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ProjectGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
